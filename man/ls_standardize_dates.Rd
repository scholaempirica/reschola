% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/limesurvey.R
\name{ls_standardize_dates}
\alias{ls_standardize_dates}
\title{Standardize Date Variables in LimeSurvey Data}
\usage{
ls_standardize_dates(
  .data,
  date_cols = c("completed", "sent", "submitdate", "startdate", "datestamp"),
  as_na = c("", "N", "Y"),
  ...
)
}
\arguments{
\item{.data}{\emph{tibble}, data frame with LimeSurvey data.}

\item{date_cols}{\emph{character}, names of date columns to be standardized.}

\item{as_na}{\emph{character}, values to be coerced to \code{NA} (default to \code{c("", "N", "Y")}).}

\item{...}{
  Arguments passed on to \code{\link[lubridate:parse_date_time]{lubridate::parse_date_time}}
  \describe{
    \item{\code{orders}}{a character vector of date-time formats. Each order string is
a series of formatting characters as listed in \code{\link[base:strptime]{base::strptime()}} but
might not include the \code{"\%"} prefix. For example, "ymd" will match all the
possible dates in year, month, day order. Formatting orders might include
arbitrary separators. These are discarded. See details for the implemented
formats. If multiple order strings are supplied, they are applied in turn
for \code{parse_date_time2()} and \code{fast_strptime()}. For \code{parse_date_time()}
the order of applied formats is determined by \code{select_formats} parameter.}
    \item{\code{tz}}{a character string that specifies the time zone with which to
parse the dates}
    \item{\code{truncated}}{integer, number of formats that can be missing. The most
common type of irregularity in date-time data is the truncation due to
rounding or unavailability of the time stamp. If the \code{truncated} parameter
is non-zero \code{parse_date_time()} also checks for truncated formats. For
example,  if the format order is "ymdHMS" and \code{truncated = 3},
\code{parse_date_time()} will correctly parse incomplete date-times like
\verb{2012-06-01 12:23}, \verb{2012-06-01 12} and \code{2012-06-01}. \bold{NOTE:} The
\code{ymd()} family of functions is based on \code{\link[base:strptime]{base::strptime()}} which currently
fails to parse \verb{\%Y-\%m} formats.}
    \item{\code{quiet}}{logical. If \code{TRUE}, progress messages are not printed, and \verb{No formats found} error is suppressed and the function simply returns a
vector of NAs.  This mirrors the behavior of base R functions
\code{\link[base:strptime]{base::strptime()}} and \code{\link[base:as.POSIXlt]{base::as.POSIXct()}}.}
    \item{\code{locale}}{locale to be used, see \link{locales}. On Linux systems you
can use \code{system("locale -a")} to list all the installed locales.}
    \item{\code{select_formats}}{A function to select actual formats for parsing from a
set of formats which matched a training subset of \code{x}. It receives a named
integer vector and returns a character vector of selected formats. Names
of the input vector are formats (not orders) that matched the training
set. Numeric values are the number of dates (in the training set) that
matched the corresponding format. You should use this argument if the
default selection method fails to select the formats in the right
order. By default the formats with most formatting tokens (\verb{\%}) are
selected and \verb{\%Y} counts as 2.5 tokens (so that it has a priority over
\verb{\%y\%m}). See examples.}
    \item{\code{exact}}{logical. If \code{TRUE}, the \code{orders} parameter is interpreted as an
exact \code{\link[base:strptime]{base::strptime()}} format and no training or guessing are performed
(i.e. \code{train}, \code{drop} parameters are ignored).}
    \item{\code{train}}{logical, default \code{TRUE}. Whether to train formats on a subset of the
input vector. As a result the supplied orders are sorted according to performance
on this training set, which commonly results in increased performance. Please note
that even when \code{train = FALSE} (and \code{exact = FALSE}) guessing of the actual
formats is still performed on the training set (a pseudo-random subset of the
original input vector). This might result in \verb{All formats failed to parse}
error. See notes below.}
    \item{\code{drop}}{logical, default \code{FALSE}. Whether to drop formats that didn't
match on the training set. If \code{FALSE}, unmatched on the training set
formats are tried as a last resort at the end of the parsing
queue. Applies only when \code{train = TRUE}. Setting this parameter to \code{TRUE}
might slightly speed up parsing in situations involving many
formats. Prior to v1.7.0 this parameter was implicitly \code{TRUE}, which
resulted in occasional surprising behavior when rare patterns where not
present in the training set.}
  }}
}
\value{
A tibble with standardized date variables.
}
\description{
Standardize Date Variables in LimeSurvey Data
}
